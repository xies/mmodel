function run_model(init,params,contraction,OUT_DIR)
% Wrapper for running vertex model

% Construct rough initial cells
initial_cells = init.initialize( init.model_params{:} );
[centroid_list, regions] = ...
    get_cents(initial_cells);
vertex_list = get_vertices(initial_cells);

% Initialize Tissue
tic
tis = Tissue(regions,vertex_list,centroid_list,params.connectivity);
T = toc;
display(['Tissue initialized in ' num2str(T) ' sec'])

% Set parameters
A0 = mean([tis.getCells.area]);
P0 = mean([tis.getCells.perimeter]);
l = P0/6; % lattice length_scale
um_per_px = sqrt(init.cell_size/A0); % pixel size

if params.dimensionless
    param_config = {...
        'dimensonless', true, ...
        'lengthScale', l, ...
        'forceScale', params.forceScale, ...
        'lineTension', params.lineTension, ...
        'lineAnisotropy', 1, ...
        'areaElasticity', params.areaElasticity*l^3/params.forceScale, ...
        'perimElasticity', params.perimElasticity*l/params.forceScale, ...
        'targetArea',sqrt(3)*3/2, ...
        'viscosity', params.dragCoeff * params.forceScale / l, ...
        'connectivity', params.connectivity, ...
        'stepSize', params.timeStep, ...
        'jitterSize', params.jitterSize, ...
        'um_per_px', um_per_px, ...
        'dt_per_frame', 10, ...
        't1Threshold',2 ...
        };
else
    param_config = {...
        'dimensonless', false, ...
        'lengthScale', 1, ...
        'forceScale', params.forceScale, ...
        'lineTension', params.lineTension, ...
        'lineAnisotropy', 1, ...
        'areaElasticity', params.areaElasticity, ...
        'perimElasticity', params.perimElasticity, ...
        'viscosity', params.dragCoeff, ...
        'connectivity', params.connectivity, ...
        'stepSize', params.timeStep, ...
        'jitterSize', params.jitterSize, ...
        'um_per_px', um_per_px, ...
        'dt_per_frame', 10 ...
        't1Threshold',2 ...
        };
end

tis = tis.setParameters(param_config{:});
T = toc;
display(['Parameter and connection matrices initialized in ' num2str(T) ' sec'])

% Set contractility
tic
% Activate "ventral fate"
cIDs = tis.getCellsWithinRegion(contraction.ventral.box);
tis = tis.activateCell(cIDs, ...
    contraction.ventral.alt_tension*tis.parameters.areaElasticity);
% Set the value of contractility in each cell
tis = tis.setContractilityModel( ...
    contraction.contractility.model,contraction.contractility.params);
T = toc;
display(['Contractility set in ' num2str(T) ' sec'])

% Add some jitter
tic
tis = tis.jitterVertices(tis.parameters.jitterSize);
T = toc;
display(['Jitter added and contractility set in ' num2str(T) ' sec'])

% init.integration_method(tis,init,OUT_DIR);
opt = odeset('OutputFcn',@odeprint); % Suppress plotting
tis.solve_model( init.solver_method, ...
    [init.t0 init.tf], OUT_DIR, opt); % Avoid assembling output

end